{
	"name": "ARP_Dataflow_F1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DataLakeTextDataset",
						"type": "DatasetReference"
					},
					"name": "drivers",
					"description": "Import drivers data"
				},
				{
					"dataset": {
						"referenceName": "DataLakeTextDataset",
						"type": "DatasetReference"
					},
					"name": "races",
					"description": "Add races data"
				},
				{
					"dataset": {
						"referenceName": "DataLakeTextDataset",
						"type": "DatasetReference"
					},
					"name": "results",
					"description": "Import results data"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlDataset",
						"type": "DatasetReference"
					},
					"name": "SinkToAzureSQLDB",
					"rejectedDataLinkedService": {
						"referenceName": "answer-data-academy-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "LeftJoinRaces",
					"description": "Left outer join 'results' and 'races'"
				},
				{
					"name": "LeftJoinDrivers"
				},
				{
					"name": "AddUUID"
				},
				{
					"name": "ConcatdriverFullname"
				},
				{
					"name": "AddYear"
				},
				{
					"name": "RemoveSurplusColumns"
				},
				{
					"name": "ReplaceRowsNotNull"
				},
				{
					"name": "alterRowPermitAll"
				},
				{
					"name": "castPointsToInt",
					"description": "Cast Points column to type integer"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Container as string (\"synapse\"),",
				"     Directory as string (\"alastair/f1_data\"),",
				"     DriversFileName as string (\"drivers.csv\"),",
				"     RaceFileName as string (\"races.csv\"),",
				"     ResultsFileName as string (\"results.csv\")",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> drivers",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> races",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> results",
				"results, races join(results@raceId == races@raceId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftJoinRaces",
				"LeftJoinRaces, drivers join(results@driverId == drivers@driverId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftJoinDrivers",
				"LeftJoinDrivers derive(Id = uuid()) ~> AddUUID",
				"AddUUID derive(driverFullname = concat(forename, \" \", surname)) ~> ConcatdriverFullname",
				"ConcatdriverFullname derive(year = year(date)) ~> AddYear",
				"AddYear select(mapColumn(",
				"          Id,",
				"          year,",
				"          round,",
				"          raceName = name,",
				"          driverFullname,",
				"          code,",
				"          position,",
				"          points,",
				"          fastestLapTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveSurplusColumns",
				"alterRowPermitAll derive(fastestLapTime = case(\r",
				"    fastestLapTime=='\\\\N', '00:00:00',\r",
				"    fastestLapTime!='\\\\N', fastestLapTime\r",
				"    ),",
				"          position = case(\r",
				"    position=='\\\\N', '0',\r",
				"    position!='\\\\N', position\r",
				"    )) ~> ReplaceRowsNotNull",
				"RemoveSurplusColumns alterRow(updateIf(true())) ~> alterRowPermitAll",
				"ReplaceRowsNotNull cast(output(",
				"          position as integer '000'",
				"     ),",
				"     errors: true) ~> castPointsToInt",
				"castPointsToInt sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id,",
				"          year,",
				"          round,",
				"          raceName,",
				"          driverFullname,",
				"          code,",
				"          position,",
				"          points,",
				"          fastestLapTime",
				"     )) ~> SinkToAzureSQLDB"
			]
		}
	}
}